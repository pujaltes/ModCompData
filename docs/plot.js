var dataset = [[6.306514739990234, 6.437558174133301], [7.834390640258789, 5.681083679199219], [8.112004280090332, 5.8474907875061035], [7.6231513023376465, 2.903867244720459], [7.672666072845459, 4.624549388885498], [7.042519569396973, 8.34764575958252], [5.25166654586792, 3.985872745513916], [6.599666595458984, 2.839123249053955], [6.4048261642456055, 2.812699794769287], [7.177908420562744, 4.479513645172119], [7.191795825958252, 2.5200841426849365], [7.54271125793457, 3.349642753601074], [4.806652069091797, 4.769926071166992], [7.32250452041626, 6.325108051300049], [8.058985710144043, 5.849414825439453], [7.298739433288574, 7.603573799133301], [5.843953609466553, 6.308285713195801], [7.824287414550781, 3.5640344619750977], [6.0849690437316895, 8.571632385253906], [6.870857238769531, 4.750497341156006], [6.974114418029785, 7.6185503005981445], [4.8730854988098145, 5.652510643005371], [6.826146125793457, 4.3653106689453125], [7.154863357543945, 2.8764569759368896], [7.8548126220703125, 3.774953842163086], [7.350181579589844, 2.622265577316284], [6.902821063995361, 8.516035079956055], [7.14998197555542, 8.238697052001953], [7.227416038513184, 8.136431694030762], [4.814796447753906, 4.441843032836914], [6.65416145324707, 2.724923610687256], [5.30097770690918, 4.467288017272949], [6.520658493041992, 3.9513297080993652], [8.261951446533203, 5.737709045410156], [6.431308269500732, 3.287806272506714], [6.886356830596924, 2.1776623725891113], [5.110609531402588, 7.584848403930664], [6.955063343048096, 3.2254738807678223], [5.741593360900879, 6.371219158172607], [6.676619529724121, 3.1103391647338867], [7.423031330108643, 5.8091301918029785], [5.422910213470459, 4.616625785827637], [6.46027946472168, 4.417111873626709], [7.125391483306885, 4.559567451477051], [6.268023490905762, 2.6309802532196045], [6.5195112228393555, 3.0110788345336914], [7.070954322814941, 2.6795060634613037], [6.851203441619873, 2.3947434425354004], [6.479609966278076, 5.575801372528076], [7.809657573699951, 5.118299961090088], [6.874703407287598, 8.56815242767334], [7.306756496429443, 2.547105073928833], [7.43192720413208, 2.701007843017578], [4.591493129730225, 4.965524673461914], [7.142660617828369, 2.158538818359375], [4.435902118682861, 6.458737850189209], [4.930041313171387, 4.639932632446289], [7.485108375549316, 2.6734206676483154], [4.760746002197266, 4.405219554901123], [4.6051859855651855, 4.817235469818115], [6.952173233032227, 8.577101707458496], [8.476839065551758, 4.1193366050720215], [6.018138885498047, 8.568320274353027], [7.728355407714844, 5.328728675842285], [7.069087505340576, 7.945533275604248], [8.234458923339844, 5.527446746826172], [5.3252058029174805, 6.780195236206055], [5.203852653503418, 8.127988815307617], [4.028076648712158, 6.540835857391357], [7.5451531410217285, 4.484312534332275], [7.571216583251953, 5.4335150718688965], [7.13297176361084, 4.315655708312988], [5.706408500671387, 6.686471939086914], [5.943914890289307, 8.444586753845215], [7.072502613067627, 6.636048316955566], [8.270776748657227, 5.601260185241699], [7.538150310516357, 5.363814830780029], [6.74087381362915, 8.439728736877441], [6.441781997680664, 3.5707781314849854], [7.318503379821777, 5.014373302459717], [7.019204616546631, 6.436627388000488], [4.695285320281982, 6.733437538146973], [5.418645858764648, 5.14534854888916], [7.5162272453308105, 4.593211650848389], [6.221508979797363, 5.427558422088623], [6.36883020401001, 3.16683030128479], [4.8674235343933105, 4.405246734619141], [7.548557758331299, 6.7955403327941895], [6.0835795402526855, 3.7483503818511963], [6.34229040145874, 6.464258193969727], [7.204603672027588, 5.304808616638184], [6.189855575561523, 3.787100076675415], [6.37026834487915, 6.362149715423584], [6.262119293212891, 4.050145626068115], [7.264289855957031, 4.074502468109131], [7.555405139923096, 5.016801357269287], [5.966785430908203, 8.488869667053223], [7.245604038238525, 4.194968223571777], [6.014620780944824, 4.55734395980835], [6.200275421142578, 2.464104175567627], [6.859090328216553, 2.240964412689209], [7.145601272583008, 2.53047251701355], [5.994234085083008, 7.783426761627197], [6.871286869049072, 6.796665668487549], [7.282527923583984, 7.8846659660339355], [5.197587490081787, 5.5917181968688965], [5.8162455558776855, 3.6541075706481934], [4.904506683349609, 7.8392744064331055], [8.470208168029785, 4.1735429763793945], [7.575645446777344, 7.993096351623535], [6.209953784942627, 8.571860313415527], [6.237528324127197, 5.794933319091797], [5.940491676330566, 6.705508708953857], [8.611900329589844, 3.74222469329834], [6.743617534637451, 2.267601490020752], [8.549942970275879, 3.772773027420044], [6.844244480133057, 8.361461639404297], [5.276075839996338, 6.989559650421143], [7.493595123291016, 5.2848429679870605], [8.475211143493652, 3.8201053142547607], [8.597569465637207, 3.7772209644317627], [7.015967845916748, 5.352844715118408], [4.844597816467285, 6.892351150512695], [6.218881130218506, 3.0102527141571045], [6.771326541900635, 4.857853412628174], [6.011399745941162, 6.47519588470459], [4.423652648925781, 6.079096794128418], [5.906849384307861, 3.584575653076172], [6.851936340332031, 7.13865852355957], [7.155634880065918, 6.349395751953125], [6.313728332519531, 2.4459707736968994], [8.505919456481934, 3.675785541534424], [6.209794521331787, 8.605995178222656], [6.068772792816162, 2.7951807975769043], [5.198421955108643, 5.742515563964844], [6.892427444458008, 4.376903533935547], [7.166929721832275, 2.8409342765808105], [6.851510047912598, 8.502730369567871], [5.983998775482178, 7.861133575439453], [7.150328636169434, 4.113777160644531], [6.059878826141357, 8.302742004394531], [7.493109226226807, 2.8759305477142334], [6.964744567871094, 3.201390027999878], [8.19333267211914, 5.744400978088379], [8.57997989654541, 3.649353265762329], [8.071017265319824, 4.771327495574951], [4.4801411628723145, 5.200590133666992], [4.991184234619141, 4.188661575317383], [4.766811370849609, 4.375016689300537], [5.861481189727783, 3.3900980949401855], [7.1344170570373535, 2.932631015777588], [6.444958686828613, 3.235875129699707], [4.990185737609863, 7.272826671600342], [7.859553337097168, 3.702507495880127], [7.244805812835693, 2.553654670715332], [4.612399101257324, 4.972533226013184], [8.30905818939209, 3.6500844955444336], [7.279564380645752, 6.653367042541504], [4.780579090118408, 7.017646312713623], [6.3831915855407715, 4.37484073638916], [4.088305950164795, 6.480963230133057], [4.8470048904418945, 6.992189884185791], [6.3901238441467285, 4.4259443283081055], [6.387158393859863, 5.226940631866455], [4.90806770324707, 6.93796443939209], [6.540843486785889, 4.135560035705566], [6.677485466003418, 3.5871798992156982], [4.872061729431152, 5.200075149536133], [3.9880380630493164, 6.605469226837158], [3.809232473373413, 6.846897602081299], [6.368464946746826, 2.6177966594696045], [5.3563361167907715, 8.223044395446777], [6.683887958526611, 2.1235196590423584], [5.566218852996826, 6.51173734664917], [7.111522197723389, 7.834218978881836], [7.561836242675781, 8.008538246154785], [7.70404577255249, 5.5967631340026855], [6.82904577255249, 2.1672656536102295], [5.609175682067871, 6.475527763366699], [6.49061918258667, 7.33903169631958], [7.03651237487793, 7.155534744262695], [6.246712684631348, 6.897895336151123], [6.992753028869629, 6.076830863952637], [6.9503679275512695, 8.238119125366211], [6.308966159820557, 5.0368757247924805], [5.392599582672119, 5.257033824920654], [7.489058494567871, 6.811307907104492], [6.580755233764648, 4.8265204429626465], [6.382970333099365, 2.4330170154571533], [6.5651726722717285, 5.300464153289795], [7.010015964508057, 8.150812149047852], [6.28028678894043, 2.6249940395355225], [6.972286224365234, 6.74319314956665], [4.8288116455078125, 7.825504779815674], [5.687220573425293, 8.357184410095215], [8.272221565246582, 3.7094104290008545], [5.936582565307617, 5.915914058685303], [6.71181583404541, 5.3229851722717285], [5.8976263999938965, 6.061500549316406], [3.778778553009033, 6.878223896026611], [5.159650802612305, 8.079937934875488], [7.191436290740967, 6.396425247192383], [5.014438152313232, 5.015528202056885], [7.281854152679443, 7.346491813659668], [4.850884437561035, 7.841702461242676], [6.059096336364746, 5.026608467102051], [6.977741241455078, 7.963280200958252], [7.110114574432373, 6.8491435050964355], [5.597208023071289, 6.462174892425537], [6.3440375328063965, 4.72219181060791], [6.9449076652526855, 5.668900489807129], [7.198721885681152, 6.859074592590332], [7.3705339431762695, 6.830549716949463], [7.457289218902588, 7.993412971496582], [3.9475066661834717, 6.671100616455078], [3.9418983459472656, 6.672212600708008], [5.127656936645508, 8.060173034667969], [4.599355220794678, 6.720980167388916], [5.562999725341797, 6.5568013191223145], [6.403072834014893, 3.20741868019104], [5.570070743560791, 6.045994758605957], [6.538763999938965, 4.401900291442871], [3.958953857421875, 6.665102005004883], [3.916318416595459, 6.711008071899414], [5.099472999572754, 8.055146217346191], [6.554316520690918, 3.646810293197632], [6.33430814743042, 2.558945655822754], [6.829671382904053, 5.800947666168213], [6.804202079772949, 5.453444957733154], [6.536245346069336, 5.2847700119018555], [6.585245609283447, 6.037123203277588], [7.046335220336914, 6.309599876403809], [6.610898494720459, 5.666217803955078], [7.001138687133789, 7.067030429840088], [6.872894287109375, 3.866455078125], [6.734671592712402, 5.467955112457275], [6.868072509765625, 6.5257391929626465], [7.530445575714111, 6.442741394042969], [8.108741760253906, 5.868789196014404], [6.168428897857666, 6.244930744171143], [5.447500705718994, 5.344278812408447], [6.970961093902588, 6.04266357421875], [5.601686000823975, 5.091182231903076], [4.91082239151001, 6.962856292724609], [7.047776222229004, 7.989823818206787], [6.944657325744629, 6.4372687339782715], [6.984121322631836, 6.685414791107178], [6.587715148925781, 4.9383015632629395], [6.805425643920898, 7.323574542999268], [7.199148654937744, 5.6594929695129395], [6.311319828033447, 7.128668308258057], [6.599358558654785, 6.100583553314209], [6.932697296142578, 6.895727634429932], [6.710263252258301, 4.769552707672119], [6.348592758178711, 4.578292369842529], [6.997722625732422, 6.12469482421875], [7.153611183166504, 4.357943058013916], [6.596848964691162, 4.866674423217773], [6.506780624389648, 5.319336414337158], [6.301879405975342, 8.52847671508789], [6.302484035491943, 5.541915416717529], [6.028659820556641, 7.1993536949157715], [6.668248176574707, 5.619955539703369], [6.621486186981201, 4.801349639892578], [6.782529830932617, 5.022175312042236], [7.266848564147949, 5.472387790679932], [6.4592719078063965, 5.396773815155029], [6.601084232330322, 4.900730609893799], [6.013790130615234, 6.506240367889404], [7.440576076507568, 5.397597789764404], [6.954915523529053, 6.8302788734436035], [6.894659519195557, 5.765068054199219], [7.278183937072754, 5.249448776245117], [7.215742111206055, 4.29727840423584], [6.719686508178711, 2.2507243156433105]]
var max_radius = 12;
var url = 'https://raw.githubusercontent.com/pujaltes/ModCompData/main/tarea_2/tarea_2.json';


var sigma = .5;
var max_sigma = 2;
var min_sigma = 0.1;

var min_radius = 5;

var height = 300;
var width = 300;
var emb_width = width;
var emb_height = height;
var point_start = {x: emb_width / 2, y: emb_height / 2};
var gap = 10;

var fr_data;
var curves;

// overall svg
svg = d3.select("#test")
    .append("svg")
    .attr("id", "mainsvg")
    .attr("height", height)
    .attr("width", width*3.5 + gap)

// first svg
svg1 = d3.select("svg#mainsvg")
    .append("svg")
    .attr("id", "svg1")
    .attr("height", height)
    .attr("width", width)
    
svg2 = d3.select("svg#mainsvg")
    .append("g") // group to move svg sideways
      .attr("transform", "translate(" + (width+gap) + ")")
      .append("svg")
      .attr("id", "svg2")
      .attr("height", height)
      .attr("width", width * 2.5)

svg3 = d3.select("svg#mainsvg")
      .append("g") // group to move svg sideways
      .attr("transform", "translate(0," + -50 + ")")
      .append("svg")
      .attr("id", "svg3")
      .attr("height", height)
      .attr("width", width)

svg4 = d3.select("svg#mainsvg")
                     .append("g")
                     .attr("transform", "translate(" + (2 * (width+gap)) + ")")
                     .append("svg")
                     .attr("id", "svg4")
                     .attr("height", height)
                     .attr("width", 100)

svg4.append("image")
    .attr("src","http://upload.wikimedia.org/wikipedia/commons/b/b0/NewTux.svg")
    .attr("width", 300)
    .attr("height", 100)

// add a box around each SVG
svg1.append("rect")
    .attr("height", height)
    .attr("width", width)
    .attr("stroke", "black")
    .attr("fill", "#ccc")
    .attr("stroke-width", 5)

svg2.append("rect")
    .attr("height", height)
    .attr("width", width * 2.5)
    .attr("stroke", "black")
    .attr("fill", "#ccc")
    .attr("stroke-width", 5)

function plot_curves(url){
	svg2.selectAll("path").remove();
	fetch(url).then(
		function(u){ return u.json();}
	      ).then(
	       function(json){
		  fr_data = JSON.parse(json) ;
		  var tmp_weight = 0;
		  var max_curve = 0;
		  var min_curve = 0;
		  //console.log(fr_data)
		  //console.log(g_val);
		  //console.log(g_max)
		  curves = fr_data.map(function (element, i){
		  	tmp_weight = weightedAverage(element, g_val);
		  	max_curve = Math.max(tmp_weight, max_curve);
		  	min_curve = Math.min(tmp_weight, min_curve);
			return {i: Math.floor(i / 48), x: i % 48, y: tmp_weight};
				});
		   var sumstat = d3.nest() // nest function allows to group the calculation per level of a factor
			.key(function(d) { return d.i;})
			.entries(curves);
		 //console.log(max_curve);
		 //console.log(min_curve);
		 var res = sumstat.map(function(d){ return d.key });
		 var color = d3.scaleOrdinal()
		    .domain(res)
		    .range(['#282828', '#303e2e', '#375334', '#3f693a', '#477f41', '#4f9547', '#56aa4d', '#5ec053']);
		var y_scale2 = d3.scaleLinear()
			.domain([min_curve, max_curve]) 
			.range([height, 0]); 
		 // removes all line currently, probably better to update though TODO: find out how to update
		 svg2.selectAll(".line")
		      .data(sumstat)
		      .enter()
		      .append("path")
			.attr("fill", "none")
			.attr("stroke", function(d){ return color(d.key) })
			.attr("stroke-width", 1.5)
			.attr("d", function(d){
			  return d3.line()
			    .x(function(d) { return x_scale2(d.x); })
			    .y(function(d) { return y_scale2(d.y); })
			    (d.values)
			});
		 
		 
		}
	      )
}
plot_curves(url);

function update_curves(){
	svg2.selectAll("path").remove();
	var tmp_weight = 0;
	var max_curve = 0;
	var min_curve = 0;
	//console.log(fr_data)
	//console.log(g_val);
	//console.log(g_max)
	curves = fr_data.map(function (element, i){
		tmp_weight = weightedAverage(element, g_val);
		max_curve = Math.max(tmp_weight, max_curve);
		min_curve = Math.min(tmp_weight, min_curve);
		return {i: Math.floor(i / 48), x: i % 48, y: tmp_weight};
		});
	var sumstat = d3.nest() // nest function allows to group the calculation per level of a factor
	   	.key(function(d) { return d.i;})
		.entries(curves);
	//console.log(max_curve);
	//console.log(min_curve);
	var res = sumstat.map(function(d){ return d.key });
	var color = d3.scaleOrdinal()
	.domain(res)
	.range(['#282828', '#303e2e', '#375334', '#3f693a', '#477f41', '#4f9547', '#56aa4d', '#5ec053']);
	var y_scale2 = d3.scaleLinear()
	.domain([min_curve, max_curve]) 
	.range([height, 0]); 

	svg2.selectAll(".line")
	.data(sumstat)
	.enter()
	.append("path")
	.attr("fill", "none")
	.attr("stroke", function(d){ return color(d.key) })
	.attr("stroke-width", 1.5)
	.attr("d", function(d){
	  return d3.line()
	    .x(function(d) { return x_scale2(d.x); })
	    .y(function(d) { return y_scale2(d.y); })
	    (d.values)
	});
		 		 
}
//https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518
function gaussian(x, y, x0, y0, sigmaX, sigmaY) {
	//https://gist.github.com/uhho/dddd61edc0fdfa1c28e6
  var exponent = -(
    ( Math.pow(x - x0, 2) / (2 * Math.pow(sigmaX, 2)))
    + ( Math.pow(y - y0, 2) / (2 * Math.pow(sigmaY, 2)))
  );
  return (1 / (Math.PI * sigmaX * sigmaY)) * Math.pow(Math.E, exponent);
}

//https://www.30secondsofcode.org/js/s/weighted-average
const weightedAverage = (nums, weights) => {
  const [sum, weightSum] = weights.reduce(
    (acc, w, i) => {
      acc[0] = acc[0] + nums[i] * w;
      acc[1] = acc[1] + w;
      return acc;
    },
    [0, 0]
  );
  return sum / weightSum;
};

//var fr_data;
// https://www.delftstack.com/howto/javascript/get-json-from-url-in-javascript/#:~:text=it%20in%20JavaScript.-,Get%20JSON%20From%20URL%20Using%20jQuery,object%20sent%20to%20the%20server.
//fetch('http://127.0.0.1:8887/fr_data.json')
//    .then(result => result.json())
//    .then((output) => {
//        fr_data = JSON.parse(output);
//}).catch(err => console.error(err));


//var dataset = [];
//for(let i=0; i<100; i++){
//  dataset.push([Math.floor(i / 10) * 90 + 5 , (i % 10) * 90 + 5] );
//}  
var n_points = dataset.length;
extent = {x: d3.extent(dataset.map(function(value,index) { return value[0]; })),
           y: d3.extent(dataset.map(function(value,index) { return value[1]; }))
}
var xscale = d3.scaleLinear()
	.domain([extent.x[0] - Math.abs(extent.x[0] * .1), extent.x[1] + extent.x[1] * .1]) 
	.range([0, emb_width]); 

var yscale = d3.scaleLinear()
	.domain([extent.y[0] - Math.abs(extent.y[0] * .1), extent.y[1] + extent.y[1] * .1]) 
	.range([emb_height, 0]); 

var x_scale2 = d3.scaleLinear()
	.domain([0, 48]) 
	.range([0, width * 2.5]); 

var g_val = [];
for(let i=0; i<n_points; i++){
  g_val.push(gaussian(dataset[i][0], dataset[i][1], xscale.invert(point_start.x), yscale.invert(point_start.y), sigma, sigma));
}

var g_max = Math.max.apply(Math, g_val);

var r = [];
for(let i=0; i<n_points; i++){
  r.push(min_radius + (g_val[i] / g_max) * (max_radius - min_radius));
}


//var curves = fr_data.map(function (element, i){
//	return {i: 'sup', x: 'sup', y: weightedAverage(g_val, element)};
//}) 


    
// add circles and pointer to svg1
var circles = svg1.selectAll("circle")
            .data(dataset)
            .enter().append("circle")
            .style("stroke", "gray")
            .style("fill", "black")
            .attr("r", function(d, i){return r[i];})
            .attr("cx", function(d){return xscale(d[0]);})
            .attr("cy", function(d){return yscale(d[1]);});

svg1.append("use")
    .attr("href", "#pointer")
    .attr("x", point_start.x)
    .attr("y", point_start.y)
    .attr("fill", "#039BE5")
    .attr("stroke", "#039BE5")
    .attr("stroke-width", "1px");






var deltaX, deltaY;

var dragHandler = d3.drag()
    .on("start", function () {
        var current = d3.select(this);
        deltaX = current.attr("x") - d3.event.x;
        deltaY = current.attr("y") - d3.event.y;
    })
    .on("drag", function () {
    	svg2.selectAll("path").remove();
    	var drag_x = Math.max(Math.min(d3.event.x + deltaX, emb_width), 0);
    	var drag_y = Math.max(Math.min(d3.event.y + deltaY, emb_height), 0);
    	//console.log(drag_x);
        d3.select(this)
            .attr("x", drag_x)
            .attr("y", drag_y);
        update_vals(drag_x, drag_y);
        update_curves();
        console.log(xscale.invert(drag_x));
        console.log(yscale.invert(drag_y));       
    });

var sliderSimple = d3
	.sliderBottom()
	.min(min_sigma)
	.max(max_sigma)
	.width(350)
	.tickFormat(d3.format('.2f'))
	.ticks(5)
	.default(.5)
	.on('onchange', val => {
	d3.select('p#value-simple').text('sigma: ' + d3.format('.2f')(sliderSimple.value()));
	sigma = Math.round(val * 100) / 100;
	update_vals(d3.select("use").attr("x"), d3.select("use").attr("y"));
	update_curves();
	//console.log(val)
	});

var gSimple = d3
    .select('div#slider-simple')
    .append('svg')
    .attr('width', 500)
    .attr('height', 100)
    .append('g')
    .attr('transform', 'translate(30, 20)');
    
function update(){
 circles	
  .attr("r", function(d, i){return r[i];})
}

function update_vals(pointer_x, pointer_y){
        g_val.forEach(function(item, i) {g_val[i] = gaussian(dataset[i][0], dataset[i][1], xscale.invert(pointer_x), yscale.invert(pointer_y), sigma, sigma)});
        g_max = Math.max.apply(Math, g_val);
        r.forEach(function(item, i) {r[i] = min_radius + (g_val[i] / g_max) * (max_radius - min_radius)});
        update();
}




gSimple.call(sliderSimple);
dragHandler(svg1.select("use"));
d3.select('p#value-simple').text('Sigma: ' + d3.format('.2f')(sliderSimple.value()));
    

